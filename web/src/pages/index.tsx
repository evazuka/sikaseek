import Head from "next/head";
import Link from "next/link";

import { MoonIcon, SunIcon } from '@chakra-ui/icons'

import { api } from "~/utils/api";
import styles from "./index.module.css";
import { Box, Button, Flex, FormControl, Heading, Input, Skeleton, Stack, useColorMode, useColorModeValue } from "@chakra-ui/react";
import { useState } from "react";
import useDebounce from "~/utils/hooks";

export default function Home() {
  const bg = useColorModeValue('gray.50', 'gray.800')
  const { colorMode, toggleColorMode } = useColorMode()

  const [filter, setFilter] = useState('')
  const debouncedFilter = useDebounce(filter, 1000)

  const { data, isLoading } = api.example.hello.useQuery({ text: "from tRPC" });


  return (
    <>
      <Head>
        <title>SikaSeek</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* Nav */}
      <Box bg={bg} px={4}>
        <Flex h={16} alignItems={'center'} justifyContent={'space-between'}>
          <Box>
            <Link href="/">
              <Heading as='h2' size='md'>SikaSeek</Heading>
            </Link>
          </Box>

          <Flex alignItems={'center'}>
            <Stack direction={'row'} spacing={7}>
              <Button variant='ghost' onClick={toggleColorMode}>
                {colorMode === 'light' ? <MoonIcon /> : <SunIcon />}
              </Button>
            </Stack>
          </Flex>
        </Flex>
      </Box>
      {/* Body */}
      <Flex
        minH='100vh'
        justify='center'
        bg={bg}
      >
        <Stack
          direction='column'
          my={36}
        >
          <Stack
            spacing={4}
            w={'full'}
            maxW={'md'}
            bg={useColorModeValue('white', 'gray.700')}
            rounded={'xl'}
            boxShadow={'lg'}
            p={6}
            my={6}
          >
            <Heading lineHeight={1.1} fontSize={{ base: '2xl', md: '3xl' }}>
              Search Sika
            </Heading>
            <FormControl id="search">
              <Input
                size='lg'
                _placeholder={{ color: 'gray.500' }}
                type="search"
                onChange={e => setFilter(e.target.value)}
              />
            </FormControl>
          </Stack>
          <ResultsSkeleton isLoading={isLoading} />
          <Results data={['a', 'b', 'c']} />
        </Stack>
      </Flex>
    </>
  );
}

type ResultsSkeletonProps = {
  isLoading: boolean
}
const ResultsSkeleton = ({ isLoading }: ResultsSkeletonProps) => {
  const bg = useColorModeValue('white', 'gray.700')
  if (!isLoading) return null
  return <Stack
    spacing={4}
    w={'full'}
    maxW={'md'}
    bg={bg}
    rounded={'xl'}
    boxShadow={'lg'}
    p={6}
    my={12}
  >
    <Skeleton height="20px" />
    <Skeleton height="20px" />
    <Skeleton height="20px" />
  </Stack>
}

const Results = ({ data }: {
  data?: string[]
}) => {
  const bg = useColorModeValue('white', 'gray.700')

  if (data === undefined) return null

  return (
    <>
      <Stack
        spacing={4}
        w={'full'}
        maxW={'md'}
        bg={bg}
        rounded={'xl'}
        boxShadow={'lg'}
        p={6}
        my={12}
      >
        {
          data.map(str => <>{str}</>)
        }
      </Stack>
    </>)
}
